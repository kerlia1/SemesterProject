using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    private bool isGrounded = false;
    private float groundedRadius = .2f;
    [SerializeField] private float attackRange = 0.69f;

    private PlayerState playerState;
    private Rigidbody2D playerBody;
    private Animator playerAnimator;

    [SerializeField] private LayerMask WhoIsEnemy;
    [SerializeField] private LayerMask whatIsGround;
    [SerializeField] private GameObject groundChecker;
    [SerializeField] private GameObject attackPoint;

    Vector3 targetVelocity = Vector3.zero;

    // ??????????? ??????????? 
    private void Awake()
    {
        playerState = GetComponent<PlayerState>();
        playerBody = GetComponent<Rigidbody2D>();
        playerAnimator = GetComponent<Animator>();
    }

    Collider2D[] ground;
    // ????????? ????????? ???-?? ??????????? ? ???????????? ???????
    // ???????????? ??? ????,????? ?????? ????????? ?? ?? ????? ??? ???
    private void FixedUpdate()
    {
        ground = Physics2D.OverlapCircleAll(groundChecker.transform.position, groundedRadius, whatIsGround);
        foreach (var item in ground)
        {
            if (item.gameObject != gameObject)
            {
                isGrounded = true;
            }
        }
    }

    // ???????????? ??? ???????? ????????? ??????
    bool isFacingRight = true;

    // ?????????? ???? ???????????? ??????
    public void Movement(float move, bool jump)
    {
        // ???????? ?????? ??? ????? ???????????
        if (move > 0 && !isFacingRight)
        {
            Flip();
        }
        else if (move < 0 && isFacingRight)
        {
            Flip();
        }

        // ???????? [<-] [->]
        targetVelocity = new Vector2(move * 10f, playerBody.velocity.y);
        playerBody.velocity = targetVelocity;
        playerAnimator.SetFloat("Speed", Mathf.Abs(move));

        // ?????? [Space]
        if (isGrounded && jump)
        {
            playerAnimator.SetBool("Jump", true);
            isGrounded = false;
            Debug.Log(isGrounded);
            playerBody.AddForce(new Vector2(playerBody.velocity.x, playerState.PlayerJumpForce));
            
        }
    }

    // ????? ??????????? ??? ??????
    private void Flip()
    {
        isFacingRight = !isFacingRight;

        Vector3 scale = transform.localScale;
        scale.x *= -1;
        transform.localScale = scale;
    }

    // ?????? ??????, ????? ?? ????????????? ??? ?????? ??? - ???????? ??? ??????
    Collider2D[] enemies;

    // ????? ???????? ???
    public void MeleeCombatAttack()
    {
        // ???????? ???? ?????? ? ??????? ?????
        enemies = Physics2D.OverlapCircleAll(attackPoint.transform.position, attackRange, WhoIsEnemy);

        // ??????? ?? ????
        foreach (var enemy in enemies)
        {
            Debug.Log(enemy.tag);
            if (enemy.tag == "PhysicEnemy")
            {
                enemy.GetComponent<MonsterController>().GetDamage(playerState.PlayerDamage);
            }
            else
            {
                continue;
            }
        }

        // ?????? ???????? ?????, ????? ??????.
        playerAnimator.SetTrigger("playerAttack");
    }

    // ??????????? ??????
    public void OnLanding()
    {
        playerAnimator.SetBool("Jump", false);
    }

    // ???????????? ??? ????????? ??????? ?????, ??????? ???????? ?????????? ?? ?????.
    private void OnDrawGizmosSelected()
    {
        if (attackPoint == null)
            return;

        Gizmos.DrawWireSphere(attackPoint.transform.position, attackRange);
        Gizmos.DrawWireSphere(groundChecker.transform.position, groundedRadius);
    }

}
